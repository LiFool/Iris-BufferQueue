{"name":"Iris-BufferQueue","tagline":"A fast, in-process, persisted queue for buffering data on local host.","body":"Iris-BufferQueue is a message queue implemented as a Java library. It is primarily intended for buffering data on local\r\nhost before processing it asynchronously.\r\n\r\nIris-BufferQueue has the following characteristics:\r\n\r\n- It's an *in-process* queue, although writing to the queue and consuming from it can happen in two different processes\r\n- It's *persisted* on disk, preserving data across application restarts and crashes\r\n- *Publishing* to the queue can happen in parallel from *multiple threads*; *no synchronisation* is required\r\n- *Consumption* from the queue can only be done by a *single thread*\r\n- *Consumption* can be happen in *batches*\r\n\r\nThese characteristics are explained in greater detail in [the documentation](docs/characteristics.md).\r\n\r\n\r\nUsage\r\n-----\r\n\r\n### Get the Jar\r\n\r\n#### Maven\r\n\r\nAdd the following repository to the 'repositories' section of your pom.xml\r\n\r\n    <repository>\r\n      <id>clojars</id>\r\n      <name>Clojars repository</name>\r\n      <url>https://clojars.org/repo</url>\r\n    </repository>\r\n\r\nAnd add the following dependency to the 'dependencies' section of your pom.xml.\r\n\r\n\t<dependency>\r\n\t  <groupId>com.flipkart.iris</groupId>\r\n\t  <artifactId>bufferqueue</artifactId>\r\n\t  <version>0.1</version>\r\n\t</dependency>\r\n\r\n#### Download\r\n\r\nYou can download the jar and find all the dependencies on [Clojars](https://clojars.org/com.flipkart.iris/bufferqueue).\r\n\r\n### Create an instance\r\n\r\n    File file = new File(\"test.ibq\");\r\n    if (!file.exists()) {\r\n        int maxDataLength = 4 * 1024; // max size of data that can be written to the queue\r\n        long numMessages = 1000000; // maximum number of unconsumed messages that can be kept in the queue\r\n        MappedBufferQueueFactory.format(file, maxDataLength, numMessages);\r\n    }\r\n    BufferQueue bufferQueue = MappedBufferQueueFactory.getInstance(file);\r\n\r\n### Publish\r\n\r\nLet's publish a simple message to the queue.\r\n\r\n    byte[] data = \"Hello world!\".getBytes();\r\n\r\n##### High-level API\r\n\r\n    bufferQueue.publish(data);\r\n\r\n##### Low-level API\r\n\r\n    BufferQueueEntry entry = bufferQueue.next().orNull();\r\n    if (entry != null) {\r\n    \ttry {\r\n\t\t    entry.set(data);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t    entry.markPublished();\r\n\t\t}\r\n\t}\r\n\telse {\r\n\t\tSystem.out.println(\"Queue full, cannot write message\");\r\n\t}\r\n\r\nIt is important that the `markPublished()` call is done within a `finally` block to ensure that it is always made.\r\n\r\n### Consuming from the queue\r\n\r\n##### Simple API\r\n\r\n    BufferQueueEntry entry = bufferQueue.consume().orNull());\r\n    if (entry != null) {\r\n\t    try {\r\n\t        byte[] data = entry.get();\r\n\t        System.out.println(data);\r\n\t    }\r\n\t    finally {\r\n\t        entry.markConsumed();\r\n\t    }\r\n\t}\r\n\telse {\r\n\t\tSystem.out.prinltn(\"Nothing to consume\");\r\n\t}\r\n\r\nIt is important that the `markConsumed()` call is done within a `finally` block to ensure that it is always made.\r\n\r\n##### Batch API\r\n\r\n\tint batchSize = 100;\r\n    List<BufferQueueEntry> entries = bufferQueue.consume(batchSize);\r\n    if (entries.size() > 0) {\r\n\t    for (BufferQueueEntry entry : entries) {\r\n\t        try {\r\n\t            byte[] data = entry.get();\r\n\t            System.out.println(data);\r\n\t        }\r\n\t        finally {\r\n\t            entry.markConsumed();\r\n\t        }\r\n\t    }\r\n\t}\r\n\telse {\r\n\t\tSystem.out.prinltn(\"Nothing to consume\");\r\n\t}\t\r\n\r\nIt is important that the `markConsumed()` call is done within a `finally` block to ensure that it is always made.\r\n\r\nDocumentation\r\n-------------\r\n\r\nTODO: Point to detailed design, usage and API docs.\r\n\r\nContribution, Bugs and Feedback\r\n-------------------------------\r\n\r\nFor bugs, questions and discussions please use the [Github Issues](https://github.com/flipkart-incubator/Iris-BufferQueue/issues).\r\n\r\nPlease follow the [contribution guidelines](https://github.com/flipkart-incubator/Iris-BufferQueue/blob/master/CONTRIBUTING.md) when submitting pull requests.\r\n\r\n\r\nLICENSE\r\n-------\r\n\r\nCopyright 2014 Flipkart Internet Pvt. Ltd.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}